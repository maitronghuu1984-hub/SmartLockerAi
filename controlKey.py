import tkinter as tk
from tkinter import messagebox
import cv2
import face_recognition
import json
import os
import time
import requests


# ====== H√†m h·ªó tr·ª£ ======

def save_user_data(name, password, image_path):
    if not os.path.exists("user_data.json"):
        with open("user_data.json", "w") as f:
            json.dump({}, f)

    with open("user_data.json", "r") as f:
        data = json.load(f)

    data[name] = {
        "password": password,
        "image": image_path
    }

    with open("user_data.json", "w") as f:
        json.dump(data, f, indent=4)


# ====== Ch·ª©c nƒÉng ch·ª•p ·∫£nh v√† l∆∞u ======

def open_camera_save():
    def capture_and_save():
        username = entry_name.get().strip()
        password = entry_password.get().strip()
        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n v√† m·∫≠t kh·∫©u.")
            return

        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            messagebox.showerror("L·ªói", "Kh√¥ng m·ªü ƒë∆∞·ª£c camera.")
            return

        messagebox.showinfo("H∆∞·ªõng d·∫´n", "Nh·∫•n 's' ƒë·ªÉ l∆∞u ·∫£nh, 'q' ƒë·ªÉ tho√°t.")
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            cv2.imshow("Ch·ª•p ·∫£nh", frame)
            key = cv2.waitKey(1) & 0xFF
            if key == ord('s'):
                if not os.path.exists("faces"):
                    os.makedirs("faces")
                file_path = f"faces/{username}.jpg"
                cv2.imwrite(file_path, frame)
                save_user_data(username, password, file_path)
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng.")
                break
            elif key == ord('q'):
                break
        cap.release()
        cv2.destroyAllWindows()

    # Hi·ªÉn th·ªã input
    top = tk.Toplevel(root)
    top.geometry("400x320")
    top.title("üì∑ L∆∞u ·∫£nh ng∆∞·ªùi d√πng")
    tk.Label(top, text="üë§ T√™n ng∆∞·ªùi d√πng", fg="blue", font=("Arial", 12, "bold")).pack()
    entry_name = tk.Entry(top)
    entry_name.pack()
    tk.Label(top, text="üîê M·∫≠t kh·∫©u",fg="blue", font=("Arial", 12, "bold")).pack()
    entry_password = tk.Entry(top, show="*")
    entry_password.pack()
    tk.Button(top, text="M·ªü Camera & L∆∞u", font=("Arial", 12, "bold"), command=capture_and_save).pack(pady=10)


# ====== Ch·ª©c nƒÉng nh·∫≠n di·ªán g∆∞∆°ng m·∫∑t ======

def open_camera_recognition():
    def start_recognition():
        try:
            known_image = face_recognition.load_image_file(user_data["image"])
            known_encoding = face_recognition.face_encodings(known_image)[0]
        except:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫£i ·∫£nh m·∫´u.")
            return

        cap = cv2.VideoCapture(0)
        matched = False
        start_time = None

        while True:
            ret, frame = cap.read()
            if not ret:
                break
            rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            faces = face_recognition.face_locations(rgb)
            encodings = face_recognition.face_encodings(rgb, faces)

            for encoding in encodings:
                result = face_recognition.compare_faces([known_encoding], encoding, tolerance=0.45)
                if result[0]:
                    matched = True
                    if start_time is None:
                        start_time = time.time()
                    elif time.time() - start_time >= 3:
                        cap.release()
                        cv2.destroyAllWindows()
                        confirm_identity()
                        return
                else:
                    start_time = None

            for (top, right, bottom, left) in faces:
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0) if matched else (0, 0, 255), 2)

            cv2.imshow("Nh·∫≠n di·ªán", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cap.release()
        cv2.destroyAllWindows()

    def confirm_identity():
        def check_credentials():
            entered_name = entry_name.get().strip()
            entered_pass = entry_password.get().strip()

            if entered_name in data and data[entered_name]["password"] == entered_pass:
                try:
                    response = requests.get("http://192.168.0.114/unlock")
                    if response.status_code == 200:
                        os.system("start mokhoa.mp3")
                        messagebox.showinfo("‚úÖ", "M·ªü kho√° th√†nh c√¥ng!")
                    else:
                        messagebox.showerror("ESP8266", "L·ªói t·ª´ thi·∫øt b·ªã.")
                except Exception as e:
                    messagebox.showerror("L·ªói", f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c y√™u c·∫ßu: {e}")
            else:
                messagebox.showerror("Sai th√¥ng tin", "T√™n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.")

        win = tk.Toplevel(root)
        win.title("üîì X√°c nh·∫≠n ng∆∞·ªùi d√πng")
        tk.Label(win, text="üë§ T√™n ng∆∞·ªùi d√πng").pack()
        entry_name = tk.Entry(win)
        entry_name.pack()
        tk.Label(win, text="üîì M·∫≠t kh·∫©u").pack()
        entry_password = tk.Entry(win, show="*")
        entry_password.pack()
        tk.Button(win, text="X√°c nh·∫≠n m·ªü kho√°", command=check_credentials).pack(pady=10)

    # T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
    if not os.path.exists("user_data.json"):
        messagebox.showerror("L·ªói", "Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng.")
        return

    with open("user_data.json", "r") as f:
        data = json.load(f)

    # M·ªü giao di·ªán y√™u c·∫ßu ch·ªçn t√™n ƒë√£ c√≥
    top = tk.Toplevel(root)
    top.geometry("400x320")
    top.title("üîç Nh·∫≠n di·ªán g∆∞∆°ng m·∫∑t")
    tk.Label(top, text="Ch·ªçn ng∆∞·ªùi d√πng:", font=("Arial", 12, "bold")).pack()
    var = tk.StringVar(top)
    var.set(list(data.keys())[0])  # gi√° tr·ªã m·∫∑c ƒë·ªãnh

    tk.OptionMenu(top, var, *data.keys()).pack(pady=5)

    def proceed():
        global user_data
        user_data = data[var.get()]
        top.destroy()
        start_recognition()

    tk.Button(top, text="B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán", font=("Arial", 12, "bold"), command=proceed).pack(pady=10)


# ====== Giao di·ªán ch√≠nh ======

root = tk.Tk()
root.title("üîê Smart Locker AI")
root.geometry("400x320")
root.resizable(False, False)

tk.Label(root, text="SMART LOCKER", font=("Arial", 20, "bold")).pack(pady=15)

tk.Button(root,
          text="üì∑ M·ªü Camera & L∆∞u ·∫¢nh",
          font=("Arial", 12,"bold"),
          width=30,
          command=open_camera_save).pack(pady=10)

tk.Button(root,
          text="üîì Nh·∫≠n Di·ªán & M·ªü Kh√≥a",
          font=("Arial", 12,"bold"),
          width=30,
          bg="green",
          fg="white",
          command=open_camera_recognition).pack(pady=10)

tk.Button(root,
          text="‚ùå Tho√°t",
          font=("Arial", 12,"bold"),
          width=30,
          bg="red", fg="white",
          command=root.quit).pack(pady=20)

root.mainloop()

