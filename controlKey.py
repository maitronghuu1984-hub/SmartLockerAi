import cv2                          # Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh v√† video
import face_recognition             # Th∆∞ vi·ªán nh·∫≠n d·∫°ng khu√¥n m·∫∑t
import requests                     # G·ª≠i y√™u c·∫ßu HTTP ƒë·∫øn ESP8266
import time                         # X·ª≠ l√Ω th·ªùi gian
import os                           # D√πng ƒë·ªÉ ph√°t √¢m thanh (macOS: d√πng afplay)

# ==== T·∫£i ·∫£nh khu√¥n m·∫∑t ƒë√£ l∆∞u (·∫£nh m·∫´u) ƒë·ªÉ nh·∫≠n di·ªán ====
known_face_path = "saved_face.jpg"
known_image = face_recognition.load_image_file(known_face_path)
known_face_encodings = face_recognition.face_encodings(known_image)

# N·∫øu kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh m·∫´u ‚Üí d·ª´ng ch∆∞∆°ng tr√¨nh
if not known_face_encodings:
    raise Exception("[ERROR] Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh m·∫´u!")

# L∆∞u encoding (ƒë·∫∑c tr∆∞ng khu√¥n m·∫∑t) ƒë·∫ßu ti√™n ƒë·ªÉ so s√°nh
known_face_encoding = known_face_encodings[0]
known_face_encodings = [known_face_encoding]
known_face_names = ["OK! Good!"]    # T√™n hi·ªÉn th·ªã n·∫øu nh·∫≠n di·ªán ƒë√∫ng

# M·ªü camera (camera m·∫∑c ƒë·ªãnh)
video_capture = cv2.VideoCapture(0)

# ==== Bi·∫øn ƒëi·ªÅu khi·ªÉn nh·∫≠n di·ªán li√™n t·ª•c ====
start_detect_time = None                     # L∆∞u th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu ph√°t hi·ªán ƒë√∫ng
UNLOCK_TRIGGER_DURATION = 3                  # C·∫ßn nh·∫≠n di·ªán ƒë√∫ng li√™n t·ª•c 3 gi√¢y ƒë·ªÉ m·ªü kh√≥a
unlock_sent = False                          # Bi·∫øn ƒë√°nh d·∫•u ƒë√£ g·ª≠i l·ªánh m·ªü kho√° hay ch∆∞a

print("[INFO] B·∫Øt ƒë·∫ßu qu√©t camera. Nh·∫•n 'q' ƒë·ªÉ tho√°t.")

# ==== V√≤ng l·∫∑p ch√≠nh: x·ª≠ l√Ω khung h√¨nh t·ª´ camera ====
while True:
    ret, frame = video_capture.read()        # ƒê·ªçc khung h√¨nh t·ª´ camera
    if not ret:
        print("[ERROR] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c camera.")
        break

  
    # T√¨m khu√¥n m·∫∑t v√† m√£ h√≥a khu√¥n m·∫∑t trong khung h√¨nh
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
    face_names = []

    face_matched = False  # Bi·∫øn ki·ªÉm tra c√≥ kh·ªõp v·ªõi khu√¥n m·∫∑t ƒë√£ l∆∞u kh√¥ng

    # So s√°nh t·ª´ng khu√¥n m·∫∑t t√¨m th·∫•y v·ªõi khu√¥n m·∫∑t m·∫´u
    for face_encoding in face_encodings:
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding, tolerance=0.45)
        name = "Sorry!"  # N·∫øu kh√¥ng kh·ªõp s·∫Ω g√°n t√™n n√†y

        if best_match_index is not None and matches[best_match_index]:
            name = known_face_names[best_match_index]
            face_matched = True  # ‚úÖ ƒê√£ nh·∫≠n di·ªán ƒë√∫ng khu√¥n m·∫∑t

        face_names.append(name)

    # ==== Ki·ªÉm tra th·ªùi gian nh·∫≠n di·ªán li√™n t·ª•c ====
    current_time = time.time()

    if face_matched:
        if start_detect_time is None:
            start_detect_time = current_time  # Ghi th·ªùi gian b·∫Øt ƒë·∫ßu nh·∫≠n di·ªán ƒë√∫ng

        elif current_time - start_detect_time >= UNLOCK_TRIGGER_DURATION and not unlock_sent:
            try:
                # G·ª≠i y√™u c·∫ßu HTTP ƒë·∫øn ESP8266 ƒë·ªÉ m·ªü kh√≥a
                response = requests.get("http://192.168.38.132/unlock")
                if response.status_code == 200:
                    print("[SUCCESS] M·ªü kh√≥a sau 3 gi√¢y nh·∫≠n di·ªán.")
                    os.system("afplay mokhoa.mp3 &")  # üîä Ph√°t √¢m thanh x√°c nh·∫≠n m·ªü kh√≥a (macOS)
                else:
                    print(f"[WARNING] ESP8266 tr·∫£ v·ªÅ m√£ l·ªói: {response.status_code}")
                unlock_sent = True  # ƒê√£ g·ª≠i y√™u c·∫ßu th√†nh c√¥ng
            except Exception as e:
                print("[ERROR] G·ª≠i y√™u c·∫ßu m·ªü kho√° th·∫•t b·∫°i:", e)
    else:
        start_detect_time = None   # Reset l·∫°i n·∫øu khu√¥n m·∫∑t kh√¥ng kh·ªõp
        unlock_sent = False        # Cho ph√©p g·ª≠i l·∫°i l·ªánh sau

    # ==== V·∫Ω khung quanh khu√¥n m·∫∑t v√† hi·ªÉn th·ªã t√™n ====
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Ph√≥ng to l·∫°i v√¨ ·∫£nh ƒë√£ b·ªã resize tr∆∞·ªõc ƒë√≥
        top *= 2
        right *= 2
        bottom *= 2
        left *= 2

        color = (0, 255, 0) if name == "OK! Good!" else (0, 0, 255)  # Xanh n·∫øu kh·ªõp, ƒë·ªè n·∫øu kh√¥ng
        cv2.rectangle(frame, (left, top), (right, bottom), color, 2)  # V·∫Ω khung
        cv2.rectangle(frame, (left, bottom - 25), (right, bottom), color, cv2.FILLED)  # N·ªÅn cho ch·ªØ
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.6, (255, 255, 255), 1)

    # Hi·ªÉn th·ªã th·ªùi gian ƒë·∫øm khi ƒëang nh·∫≠n di·ªán ƒë√∫ng
    if start_detect_time and not unlock_sent:
        elapsed = int(current_time - start_detect_time)
        cv2.putText(frame, f"Test face... {elapsed}/3s",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    # Hi·ªÉn th·ªã khung h√¨nh l√™n c·ª≠a s·ªï
    cv2.imshow('Face Unlock - Nh·∫•n q ƒë·ªÉ tho√°t', frame)

    # Nh·∫•n 'q' ƒë·ªÉ tho√°t ch∆∞∆°ng tr√¨nh
    if cv2.waitKey(1) & 0xFF == ord('q'):
        print("[INFO] ƒê√≥ng ch∆∞∆°ng tr√¨nh...")
        break

# ==== Gi·∫£i ph√≥ng t√†i nguy√™n sau khi tho√°t ====
video_capture.release()
cv2.destroyAllWindows()
